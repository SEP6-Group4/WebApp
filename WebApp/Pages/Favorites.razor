@page "/Favorites"
@using WebApp.Data.Actors
@using WebApp.Data.FavoriteMovie
@using WebApp.Data.FavouriteActor
@using WebApp.Data.Movies
@using WebApp.Data.Users
@using WebApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IMovieService MovieService
@inject IActorService ActorService
@inject IFavoriteMovieService FavoriteMovieService
@inject IFavouriteActorService FavoriteActorService
@inject IUserService UserService
@inject NavigationManager uriHelper;



<div class="container">
    <div class="row filter">
        <div class="col-md-3">
            <select class="form-select" aria-label="Default select example" @onchange="@HandleChange">
                <option value="Movies">Favorite Movies</option>
                <option value="Actors">Favorite Actors</option>
            </select>
        </div>
        <div class=" col-md-7">
            <input type="search" @bind-value="searchQuery" placeholder="Enter an email..." class="form-control" maxlength="150" />
        </div>
        <button class="btn btn-primary" @onclick="GetFavorites">
            <i class="bi bi-search"></i>
        </button>
    </div>

    <div class="row">
        @if (showList)
        {
            @if (isActors)
            {
                @foreach (var a in actorList.Actors)
                {
                                                                    <div class="col-md-2 card">
                                                                        <div>
                                                                            <a href="/ActorOverview" class="card-img" @onclick="() => ActorSelected(a.Id)">
                                @if (a.ProfilePath != null)
                                {
                                                                                                    <img class="movie-image" src="http://image.tmdb.org/t/p/w500/@a.ProfilePath">
                                }
                                else
                                {
                                                                                                    <img class="movie-image" src="/User_gray.png"> <br> <br> <br> <br> <br>
                                }

                                                                            </a>
                                                                        </div>
                                                                        <div class="title">
                                                                            <h5><a> @a.Name</a></h5>
                                                                        </div>
                                                                    </div>                
                }
            }
            else
            {
                @foreach (var m in movieList.movies)
                {
                                                                    <div class="col-md-2 card">
                                                                        <div>
                                                                            <a href="/MovieOverview" class="card-img" @onclick="() => MovieSelected(m.id)">
                                                                                <img class="movie-image" src="http://image.tmdb.org/t/p/w500/@m.poster_path">
                                                                            </a>
                                                                        </div>
                                                                        <div class="title">
                                                                            <h5><a> @m.title</a></h5>
                                                                            <p>
                                @m.release_date <br>
                                                                                (@m.vote_average / 10)
                                                                            </p>
                                                                        </div>
                                                                    </div>
                }
            }            
        }
        @if (!string.IsNullOrWhiteSpace(message))
        {
                                <div class="alert alert-danger">
                @message
                                </div>
        }
    </div>  

    <div class="align-content-center" style="text-align:center">
            <a href="/Actors" class="btn btn-white" @onclick="FirstPage" title="First Page"><i class="bi bi-chevron-double-left"></i> </a>
            <a href="/Actors" class="btn btn-white" @onclick="PreviousPage" title="Previous Page"> <i class="bi bi-arrow-left-square"></i> </a>
            <span>Page @currentPage of @actorList.TotalPage </span>
            <a href="/Actors" class="btn btn-white" @onclick="NextPage" title="Next Page"><i class="bi bi-arrow-right-square"></i> </a>
            <a href="/Actors" class="btn btn-white" @onclick="LastPage" title="Last Page"><i class="bi bi-chevron-double-right"></i> </a>
        </div>
</div>

@code {
    private MovieList movieList = new MovieList();
    private ActorList actorList = new ActorList();
    private bool isActors = false;
    public string searchQuery = "";
    public bool showList = false;
    string message = String.Empty;
    private int currentPage = 1;
    private bool dropDownSelect = false;
    private List<List<Actor>> splitedActorFavouriteList;
    private List<List<Movie>> splitedMovieFavouriteList;

    private async Task<MovieList> GetFavMoviesByEmail()
    {
        var result = await FavoriteMovieService.GetFavoriteMoviesByEmail(searchQuery);
        return result;
    }

    private async Task<List<Actor>> GetFavActorsByEmail()
    {
        var result = await FavoriteActorService.GetFavouriteActorsByEmail(searchQuery);
        return result;
    }

    protected async Task GetFavorites()
    {
        message = "";
        if (searchQuery == string.Empty)
        {
            showList = false;
            message = "Please enter an email in the search field and try again";
            return;
        }

        if (!isActors)
        {
            MovieList tempMovies = await GetFavMoviesByEmail();
            if (tempMovies == null)
            {
                message = "The user either does not exist or their privacy settings are blocking your request";
                return;
            }
            movieList = tempMovies;
            splitedMovieFavouriteList = SplitListMovie(movieList.movies);
            showList = true;
        }
        else
        {
            List<Actor> tempActors = await GetFavActorsByEmail();

            if (tempActors == null)
            {
                message = "The user either does not exist or their privacy settings are blocking your request";
                return;
            }

            actorList.Actors = tempActors;
            splitedActorFavouriteList = SplitListActor(actorList.Actors);
            showList = true;
        }
    }

    protected async Task NextPage()
    {
        if (searchQuery == string.Empty) return;

        if (currentPage < actorList.TotalPage)
        {
            currentPage += 1;
            if (isActors)
            {
                FavouriteActorsListPage();
            }
            else
            {
                FavouriteMoviesListPage();
            }
        }
    }

    protected async Task PreviousPage()
    {
        if (searchQuery == string.Empty) return;
        if (currentPage > 1)
        {
            currentPage -= 1;
            if (isActors)
            {
                FavouriteActorsListPage();
            }
            else
            {
                FavouriteMoviesListPage();
            }
        }
    }

    protected async Task FirstPage()
    {
        if (searchQuery == string.Empty) return;
        if (currentPage != 1)
        {
            currentPage = 1;
            if (isActors)
            {
                FavouriteActorsListPage();
            }
            else
            {
                FavouriteMoviesListPage();
            }
        }
    }

    protected async Task LastPage()
    {
        if (searchQuery == string.Empty) return;
        if (currentPage != actorList.TotalPage)
        {
            currentPage = actorList.TotalPage;
            if (isActors)
            {
                FavouriteActorsListPage();
            }
            else
            {
                FavouriteMoviesListPage();
            }
        }
    }

    public async Task MovieSelected(int id)
    {
        MovieService.SetMovieId(id);
    }

    public async Task ActorSelected(int id)
    {
        ActorService.SetActorId(id);
    }

    public async void HandleChange(ChangeEventArgs e)
    {
        message = "";
        if (e.Value.Equals("Movies"))
        {
            isActors = false;
            currentPage = 1;

            await GetFavorites();
            FavouriteMoviesListPage();
        }
        else if (e.Value.Equals("Actors"))
        {
            isActors = true;
            currentPage = 1;

            await GetFavorites();
            FavouriteActorsListPage();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void FavouriteActorsListPage()
    {
        actorList.TotalPage = splitedActorFavouriteList.Count;

        foreach (var item in splitedActorFavouriteList.Select((value, index) => new { value, index }))
        {
            if (item.index + 1 == currentPage)
            {
                actorList.Actors = item.value;
            }
        }
    }

    private void FavouriteMoviesListPage()
    {
        movieList.TotalPage = splitedMovieFavouriteList.Count;

        foreach (var item in splitedMovieFavouriteList.Select((value, index) => new { value, index }))
        {
            if (item.index + 1 == currentPage)
            {
                movieList.movies = item.value;
            }
        }
    }

    public static List<List<Actor>> SplitListActor(List<Actor> favouriteList, int nSize = 20)
    {
        var list = new List<List<Actor>>();

        for (int i = 0; i < favouriteList.Count; i += nSize)
        {
            list.Add(favouriteList.GetRange(i, Math.Min(nSize, favouriteList.Count - i)));
        }

        return list;
    }

    public static List<List<Movie>> SplitListMovie(List<Movie> favouriteList, int nSize = 20)
    {
        var list = new List<List<Movie>>();

        for (int i = 0; i < favouriteList.Count; i += nSize)
        {
            list.Add(favouriteList.GetRange(i, Math.Min(nSize, favouriteList.Count - i)));
        }

        return list;
    }  
}