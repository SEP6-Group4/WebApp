@page "/Actors"
@using WebApp.Data.Actors
@using WebApp.Data.FavouriteActor
@using WebApp.Models
@using WebApp.Data.Users
@inject IFavouriteActorService FavouriteActorService
@inject IActorService ActorService
@inject IUserService UserService

@if (actorList.Actors == null)
{
    <p>
        <em>Loading...</em>
    </p>
}

else
{
    <div class="container">
        <div class="row filter">
            <AuthorizeView>
                <div class="col-md-3">    
                    <select class="form-select" aria-label="Default select example" @onchange="@HandleChange">
                        <option disabled >Sorting by...</option>
                        <option value="All">All actors</option>   
                        <option value="Favorites">Your favorite actors</option>                   
                    </select>       
                </div>
             </AuthorizeView>
            <div class=" col-md-7">
                <input type="search" @bind-value="searchQuery" placeholder="Search" class="form-control" maxlength="150" />
            </div>
            <button class="btn btn-primary" @onclick="GetActorBySearch">
                <i class="bi bi-search"></i>
            </button>
        </div>

        <div class="row">
            @foreach (var a in actorList.Actors)
            {
                    <div class="col-md-2 card">
                        <div>
                            <a href="/ActorOverview" class="card-img" @onclick="() => ActorSelected(a.Id)">
                                @if (a.ProfilePath != null)
                                {
                                    <img class="movie-image" src="http://image.tmdb.org/t/p/w500/@a.ProfilePath">
                                }
                                else
                                {
                                    <img class="movie-image" src="/User_gray.png"> <br> <br> <br> <br> <br>
                                }
                                
                            </a>
                        </div>
                        <div class="title">
                            <h5><a> @a.Name</a></h5>
                        </div>
                    </div>                
            }
        </div>

        <div class="align-content-center" style="text-align:center">
            <a href="/Actors" class="btn btn-white" @onclick="FirstPage" title="First Page"><i class="bi bi-chevron-double-left"></i> </a>
            <a href="/Actors" class="btn btn-white" @onclick="PreviousPage" title="Previous Page"> <i class="bi bi-arrow-left-square"></i> </a>
            <span>Page @actorList.CurrentPage of @actorList.TotalPage </span>
            <a href="/Actors" class="btn btn-white" @onclick="NextPage" title="Next Page"><i class="bi bi-arrow-right-square"></i> </a>
            <a href="/Actors" class="btn btn-white" @onclick="LastPage" title="Last Page"><i class="bi bi-chevron-double-right"></i> </a>
        </div>
    </div>
}
@code {
    private List<int> actorIds = new List<int>();
    private List<Actor> favouriteActors = new List<Actor>();
    private ActorList actorList = new ActorList();
    private bool dropDownSelect = false;
    public string searchQuery = "";
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        actorList = await GetActors(currentPage);
    }

    private async Task<ActorList> GetActors(int page)
    {
        var result = await ActorService.GetPopularActors(page);
        return result;
    }

    private async Task GetFavouriteActorIds(int userId)
    {
        actorIds = await FavouriteActorService.GetFavouriteActorIds(userId);
    }

    protected async Task GetFavouriteActors()
    {
        await GetFavouriteActorIds(UserService.GetUserId());
        favouriteActors.Clear();
        foreach (int id in actorIds)
        {
            favouriteActors.Add(await ActorService.GetActorByID(id));
        }

    }

    protected async Task GetActorBySearch()
    {
        if (searchQuery == "")
        {
            currentPage = 1;
            actorList = await GetActors(currentPage);
        }
        else
        {
            actorList = await ActorService.GetActorsBySearch(currentPage, searchQuery);
        }
    }

    protected async Task NextPage()
    {
        if (currentPage < actorList.TotalPage)
        {
            currentPage = actorList.CurrentPage + 1;
            if (searchQuery != "")
            {
                await GetActorBySearch();
            }
            else
            {
                actorList = await GetActors(currentPage);
            }
        }
    }

    protected async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage = actorList.CurrentPage - 1;
            if (searchQuery != "")
            {
                await GetActorBySearch();
            }
            else
            {
                actorList = await GetActors(currentPage);
            }
        }
    }

    protected async Task FirstPage()
    {
        if (currentPage != 1)
        {
            currentPage = 1;
            if (searchQuery != "")
            {
                await GetActorBySearch();
            }
            else
            {
                actorList = await GetActors(currentPage);
            }
        }
    }

    protected async Task LastPage()
    {
        if (currentPage != actorList.TotalPage)
        {
            currentPage = actorList.TotalPage;
            if (searchQuery != "")
            {
                await GetActorBySearch();
            }
            else
            {
                actorList = await GetActors(currentPage);
            }
        }
    }

    public async Task ActorSelected(int id)
    {
        ActorService.SetActorId(id);
    }

    public async void HandleChange(ChangeEventArgs e)
    {
        if (e.Value.Equals("Favorites"))
        {
            await GetFavouriteActors();
            actorList.Actors = favouriteActors;
        }
        else if(e.Value.Equals("All")) {
            actorList = await GetActors(currentPage);

        }
        dropDownSelect = true;
        await InvokeAsync(StateHasChanged);
    }
}
