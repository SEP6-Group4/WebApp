@page "/Movies"
@using WebApp.Data.Movies
@using WebApp.Models
@inject IMovieService MovieService

@if (movieList.movies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!movieList.movies.Any())
{
    <p>
        <em>No movie exist. </em>
    </p>
}
else 
{
    <div class="container">
               <div class="row">
                  <div class="form-outline col-md-8">
                    <input type="search" placeholder="Search" class="form-control" maxlength="150" />
                  </div>
                  <button class="btn btn-primary col-md-1">
                   <i class="bi bi-search"></i>
                  </button>
               </div>
        <div class="row">
             @foreach (var m in movieList.movies)
             {
              <div class="col-md-2 card">
                <div >                   
                    <a href="/MovieOverview" class="card-img" @onclick="() => MovieSelected(m.id)">
                       <img class="movie-image" src="http://image.tmdb.org/t/p/w500/@m.poster_path">                               
                    </a>
                </div>
                <div class="title">
                    <h5 ><a> @m.title</a></h5>
                    <p>@m.release_date <br>
                    (@m.vote_average / 10)</p>
                </div>
              </div>
             }
        </div>

        <div class="navbar align-content-center">
            <a href="/Movies" class="btn btn-white" @onclick="FirstPage" title="First Page" ><i class="bi bi-chevron-double-left"></i> </a>
            <a href="/Movies" class="btn btn-white" @onclick="PreviousPage" title="Previous Page" > <i class="bi bi-arrow-left-square"></i> </a>
                <span>Page @movieList.CurrentPage of @movieList.TotalPage </span>
            <a href="/Movies" class="btn btn-white" @onclick="NextPage" title="Next Page" ><i class="bi bi-arrow-right-square"></i> </a>
            <a href="/Movies" class="btn btn-white" @onclick="LastPage" title="Last Page" ><i class="bi bi-chevron-double-right"></i> </a>
        </div>
    </div>
}
@code {
    private MovieList movieList = new MovieList();
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        movieList = await GetMovies(currentPage);
    }

    private async Task<MovieList> GetMovies(int page)
    {
        var result = await MovieService.GetMoviesByRatingDesc(page);
        return result;
    }

    protected async Task NextPage()
    {
        if (currentPage < movieList.TotalPage)
        {
            currentPage = movieList.CurrentPage + 1;
            movieList = await GetMovies(currentPage);
        }
    }

    protected async Task PreviousPage()
    {
        if (currentPage > 1)
        {         
            currentPage = movieList.CurrentPage - 1;
            movieList = await GetMovies(currentPage);
        }
    }

    protected async Task FirstPage()
    {
        if (currentPage != 1)
        {
            currentPage = 1;
            movieList = await GetMovies(currentPage);   
        }
    }

    protected async Task LastPage()
    {
        if (currentPage != movieList.TotalPage)
        {
            currentPage = movieList.TotalPage;
            movieList = await GetMovies(movieList.TotalPage);   
        }
    }

     public async Task MovieSelected(int id)
    {
        MovieService.SetMovieId(id);
    }
}