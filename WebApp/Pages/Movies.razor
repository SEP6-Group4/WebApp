@page "/Movies"
@using WebApp.Data.FavoriteMovie
@using WebApp.Data.Movies
@using WebApp.Data.Users
@using WebApp.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IMovieService MovieService
@inject IFavoriteMovieService FavoriteMovieService
@inject IUserService UserService
@inject NavigationManager uriHelper;

@if (movieList.movies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!movieList.movies.Any())
{
    <p>
        <em>No movie exist. </em>
    </p>
}
else
{
    <div class="container">
        <div class="row filter">
            <div class="col-md-3">
                <select class="form-select" aria-label="Default select example" @onchange="@HandleChange">
                    <option value="RatingDesc">Rating High to Low</option>
                    <option value="RatingAsc">Rating Low to High</option>
                    <option value="TitleAsc">Title A to Z</option>
                    <option value="TitleDesc">Title Z to A</option>
                    <AuthorizeView>
                        <option value="Favorites">Your favorites</option>
                    </AuthorizeView>
                </select>
            </div>
            <div class=" col-md-7">
                <input type="search" @bind-value="searchQuery" placeholder="Search" class="form-control" maxlength="150" />
            </div>
            <button class="btn btn-primary" @onclick="GetMoviesBySearch">
                <i class="bi bi-search"></i>
            </button>
        </div>

        <div class="row">
            @foreach (var m in movieList.movies)
            {
                <div class="col-md-2 card">
                    <div>
                        <a href="/MovieOverview" class="card-img" @onclick="() => MovieSelected(m.id)">
                            <img class="movie-image" src="http://image.tmdb.org/t/p/w500/@m.poster_path">
                        </a>
                    </div>
                    <div class="title">
                        <h5><a> @m.title</a></h5>
                        <p>
                            @m.release_date <br>
                            (@m.vote_average / 10)
                        </p>
                    </div>
                </div>
            }
        </div>

        <div class="align-content-center" style="text-align:center">
            <a href="/Movies" class="btn btn-white" @onclick="FirstPage" title="First Page"><i class="bi bi-chevron-double-left"></i> </a>
            <a href="/Movies" class="btn btn-white" @onclick="PreviousPage" title="Previous Page"> <i class="bi bi-arrow-left-square"></i> </a>
            <span>Page @movieList.CurrentPage of @movieList.TotalPage </span>
            <a href="/Movies" class="btn btn-white" @onclick="NextPage" title="Next Page"><i class="bi bi-arrow-right-square"></i> </a>
            <a href="/Movies" class="btn btn-white" @onclick="LastPage" title="Last Page"><i class="bi bi-chevron-double-right"></i> </a>
        </div>
    </div>
}
@code {
    private MovieList movieList = new MovieList();
    private int currentPage = 1;
    //public string Sorting = "TopRated";
    public string searchQuery = "";
    private string dropdownSelectName = "RatingDesc";

    protected override async Task OnInitializedAsync()
    {
        movieList = await MovieService.GetMoviesByRatingDesc(currentPage);
    }

    private async Task<MovieList> GetMovies(int page)
    {
        MovieList result = new MovieList();
        if (dropdownSelectName.Equals("Favorites"))
        {
            //result = await FavoriteMovieService.GetFavoriteMoviesByID(UserService.GetUserId());

            List<Movie> movies = await FavoriteMovieService.GetFavoriteMoviesByUser(UserService.GetUserId());

            int count = (page * 20);
            MovieList list = new MovieList();
            list.movies = new List<Movie>();
            list.TotalPage = (int)Math.Ceiling((double)movies.Count / 20);
            list.CurrentPage = currentPage;

            if (movies.Count - count >= 0)
            {

                for (int i = count - 20; i < count; i++)
                {
                    list.movies.Add(movies[i]);
                }
                result = list;
            }
            else
            {
                for (int i = count - 20; i < movies.Count; i++)
                {
                    list.movies.Add(movies[i]);
                    Console.WriteLine(movies[i].title);
                }
                result = list;
            }
        }
        else if (dropdownSelectName.Equals("RatingDesc"))
        {
            result = await MovieService.GetMoviesByRatingDesc(currentPage);
        }
        else if (dropdownSelectName.Equals("RatingAsc"))
        {
            result = await MovieService.GetMoviesByRatingAsc(currentPage);
        }
        else if (dropdownSelectName.Equals("TitleAsc"))
        {
            result = await MovieService.GetMoviesByTitleAsc(currentPage);
        }
        else if (dropdownSelectName.Equals("TitleDesc"))
        {
            result = await MovieService.GetMoviesByTitleDesc(currentPage);
        }
        return result;
    }

    protected async Task GetMoviesBySearch()
    {
        if (searchQuery == "")
        {
            currentPage = 1;
            movieList = await GetMovies(currentPage);
        }
        else
        {
            movieList = await MovieService.GetMoviesBySearch(currentPage, searchQuery);
        }
    }

    protected async Task NextPage()
    {
        if (currentPage < movieList.TotalPage)
        {
            currentPage = movieList.CurrentPage + 1;
            if (searchQuery != "")
            {
                await GetMoviesBySearch();
            }
            else
            {
                movieList = await GetMovies(currentPage);
            }
        }
    }

    protected async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage = movieList.CurrentPage - 1;
            if (searchQuery != "")
            {
                await GetMoviesBySearch();
            }
            else
            {
                movieList = await GetMovies(currentPage);
            }
        }
    }

    protected async Task FirstPage()
    {
        if (currentPage != 1)
        {
            currentPage = 1;
            if (searchQuery != "")
            {
                await GetMoviesBySearch();
            }
            else
            {
                movieList = await GetMovies(currentPage);
            }
        }
    }

    protected async Task LastPage()
    {
        if (currentPage != movieList.TotalPage)
        {
            currentPage = movieList.TotalPage;
            if (searchQuery != "")
            {
                await GetMoviesBySearch();
            }
            else
            {
                movieList = await GetMovies(currentPage);
            }
        }
    }

    public async Task MovieSelected(int id)
    {
        MovieService.SetMovieId(id);
    }

    public async void HandleChange(ChangeEventArgs e)
    {
        if (e.Value.Equals("Favorites"))
        {
            dropdownSelectName = "Favorites";
            currentPage = 1;
            List<Movie> movies = await FavoriteMovieService.GetFavoriteMoviesByUser(UserService.GetUserId());
            MovieList result = new MovieList();
            result.movies = new List<Movie>();
            result.TotalPage = (int)Math.Ceiling((double)movies.Count / 20);
            result.CurrentPage = 1;
            if (movies.Count >= 20)
            {
                for (int i = 0; i < 20; i++)
                {
                    result.movies.Add(movies[i]);
                }
                movieList = result;
            }
            else
            {
                for (int i = 0; i < movies.Count; i++)
                {
                    result.movies.Add(movies[i]);
                }
                movieList = result;
            }
        }
        else if (e.Value.Equals("RatingDesc"))
        {
            dropdownSelectName = "RatingDesc";
            currentPage = 1;
            movieList = await MovieService.GetMoviesByRatingDesc(1);
        }
        else if (e.Value.Equals("RatingAsc"))
        {
            dropdownSelectName = "RatingAsc";
            currentPage = 1;
            movieList = await MovieService.GetMoviesByRatingAsc(1);
        }
        else if (e.Value.Equals("TitleAsc"))
        {
            dropdownSelectName = "TitleAsc";
            currentPage = 1;
            movieList = await MovieService.GetMoviesByTitleAsc(1);
        }
        else if (e.Value.Equals("TitleDesc"))
        {
            dropdownSelectName = "TitleDesc";
            currentPage = 1;
            movieList = await MovieService.GetMoviesByTitleDesc(1);
        }
        await InvokeAsync(StateHasChanged);
    }
}