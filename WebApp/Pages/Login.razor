@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.Data.Users;
@using WebApp.Models;
@using System.Security.Claims
@using WebApp.Models.Authentication

@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

        <div class="container">
            <div class="row">
                <div class=" mx-auto">

                    <h5 class="card-title text-center">Login</h5>
                    <form class="form-login">
                            <div class="form-label-group">
                                <label class="oi oi-person">  Email</label>
                                <input type="email" class="form-control" placeholder="Email" @bind-value="email" required>
                            </div>
                            <div class="form-label-group">
                                <label class="oi oi-lock-locked"> Password</label>
                                <input type="password" class="form-control" placeholder="Password" @bind-value="password" required>
                            </div>
                    </form>
                    <div class="form-label-group">
                         <button class="btn btn-outline-success btn-block text-uppercase" type="submit" @onclick="PerformLogin">Log in</button>
                    </div>
                    <div class="form-label-group">
                           <p class="text-center">Don't have an account? <a class="btn btn-primary" href="CreateAccount">Sign up</a> </p>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>


@code {
    private string email;
    private string password;
    private string errorMessage;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(email, password);
            var userPrincipal = (await AuthStat).User;

            UserService.SetUserId(int.Parse(userPrincipal.FindFirst(c => c.Type == ClaimTypes.SerialNumber)?.Value));
            email = "";
            password = "";               
            await InvokeAsync(StateHasChanged);
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}
