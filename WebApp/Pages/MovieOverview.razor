@page "/MovieOverview"
@using WebApp.Data.FavoriteMovie
@using WebApp.Data.Movies
@using WebApp.Data.Users
@using WebApp.Data.Actors
@using WebApp.Models
@using WebApp.Models.Authentication
@inject IMovieService MovieService
@inject IFavoriteMovieService FavoriteMovieService
@inject IUserService UserService
@inject IActorService ActorService

@if (movie == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <img class="movie-image card-img" src="http://image.tmdb.org/t/p/w500/@movie.poster_path">
                        <div class="row">
                            <div class="col-md-6" id="release-date">
                                <h6>@movie.release_date</h6>
                            </div>
                            <div class="ratings col-md-6">
                                @switch (averageRating)
                                {
                                    case 1:
                                        <span>(@movie.vote_average / 10)</span>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        break;
                                    case 2:
                                        <span>(@movie.vote_average / 10)</span>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        break;
                                    case 3:
                                        <span>(@movie.vote_average / 10)</span>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star"></i>
                                        <i class="bi bi-star"></i>
                                        break;
                                    case 4:
                                        <span>(@movie.vote_average / 10)</span>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star"></i>
                                        break;
                                    case 5:
                                        <span>(@movie.vote_average / 10)</span>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        <i class="bi bi-star-fill"></i>
                                        break;
                                }
                            </div>
                        </div>


                    </div>
                    <div class="col-md-8">
                        <div>

                            @if (isMovieFavorited)
                            {
                                <h2>
                                    @movie.title
                                    <AuthorizeView>      
                                        <a  href="/MovieOverview" title="Remove from favourite list" @onclick="RemoveMovieFromFavorites" style="text-decoration:none;"><i style="width:fit-content" class="bi bi-heart-fill"></i> </a>
                                        (@favoriteCount)
                                    </AuthorizeView>
                                </h2>
                            }
                            else
                            {
                                <h2>
                                    @movie.title
                                    <AuthorizeView>                                        
                                        <a href="/MovieOverview" title="Add to favourite list" @onclick="AddMovieToFavorites" style="text-decoration:none;"><i style="width:fit-content" class="bi bi-heart"></i> </a>
                                        (@favoriteCount)
                                    </AuthorizeView>
                                </h2>
                            }
                                @foreach (var genre in genres)
                                {
                                  <span class="genre-label">@genre.name</span>
                                } 

                            <h4 class="movie-overview">Overview</h4>
                            <p>@movie.overview</p>
                        </div> <br> <br>
                        <div class="col-md-12">
                            <h4>Actors</h4>
                            <ol class="actors scroller">
                                @foreach (Actor actor in @actors)
                                {
                                    <li class="card">
                                        <a href="/ActorOverview" class="card-img" @onclick="() => ActorSelected(actor.Id)">
                                            @if (@actor.ProfilePath != null)
                                            {
                                                <img class="actor-image" src="http://image.tmdb.org/t/p/w500/@actor.ProfilePath">
                                            }
                                            else
                                            {
                                                <img class="actor-image" src="/User_gray.png" style="margin-bottom:45px;">

                                                <br />

                                                <br />
                                            }
                                            <h6>@actor.OriginalName</h6>
                                        </a>
                                    </li>
                                }
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private Movie movie = new Movie();
    private int averageRating;
    private Credit credit = new Credit();
    private List<Actor> actors = new List<Actor>();
    private bool isMovieFavorited = false;
    private int favoriteCount = 0;
    private List<Genre> genres = new List<Genre>();

    protected override async Task OnInitializedAsync()
    {
        movie = await GetMovie(MovieService.GetMovieId());
        credit = await GetCreditsByMovie(MovieService.GetMovieId());
        averageRating = (int)movie.vote_average / 2;
        isMovieFavorited = await IsMovieFavorited();

        foreach (Actor actor in credit.Actors)
        {
            actors.Add(actor);
        }
        favoriteCount = await FavoriteMovieService.GetFavoriteMovieCount(MovieService.GetMovieId());
        movie.genres.ForEach(x => genres.Add(x));
    }

    private async Task<Movie> GetMovie(int id)
    {
        var result = await MovieService.GetMovieByID(id);
        return result;
    }

    private async Task<Credit> GetCreditsByMovie(int id)
    {
        var result = await MovieService.GetCreditsByMovieId(id);
        return result;
    }

    private async Task AddMovieToFavorites()
    {
        isMovieFavorited = true;        
        await FavoriteMovieService.AddFavoriteMovie(UserService.GetUserId(), MovieService.GetMovieId());
        favoriteCount += 1;
    }

    private async Task RemoveMovieFromFavorites()
    {
        isMovieFavorited = false;       
        await FavoriteMovieService.RemoveFavoriteMovieByID(UserService.GetUserId(), MovieService.GetMovieId());
        favoriteCount -= 1;
    }

    private async Task<bool> IsMovieFavorited()
    {
        return await FavoriteMovieService.GetIsFavoriteMovieByID(UserService.GetUserId(), MovieService.GetMovieId());
    }

    public async Task ActorSelected(int id)
    {
        ActorService.SetActorId(id);
    }
}
