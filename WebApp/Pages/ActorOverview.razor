@page "/ActorOverview"
@using WebApp.Data.Actors
@using WebApp.Data.Movies
@using WebApp.Data.FavouriteActor
@using WebApp.Data.Users
@using WebApp.Models
@inject IActorService ActorService
@inject IMovieService MovieService
@inject IFavouriteActorService FavouriteActorService
@inject IUserService UserService

@if (actor == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <img class="movie-image card-img" src="http://image.tmdb.org/t/p/w500/@actor.ProfilePath">
                        <div class="row">
                            <div style="margin-left:40px;">
                                <span class="fw-bold">Birthday </span> <br>
                                <span>@actor.Birthday</span><br>
                                <span class="fw-bold">Place of birth</span><br>
                                <span>@actor.place_of_birth</span><br>
                                <span class="fw-bold">Average rating for movies starred in</span><br>
                                <span>(@averageMovieRatings / 10)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div>
                            <h2>@actor.Name
                                <AuthorizeView>
                                @if (!isActorFavourite)
                                {
                                    <a href="/ActorOverview" title="Add to favourite list" style="text-decoration:none;" @onclick="() => AddActorToFavourite(UserService.GetUserId(), actor.Id) ">
                                       <i class="bi bi-heart"></i>
                                    </a>
                                }
                                else if(isActorFavourite)
                                {
                                    <a href="/ActorOverview" title="Remove from favourite list" style="text-decoration:none;" @onclick="() => RemoveActorFromFavourite(UserService.GetUserId(), actor.Id)" >
                                        <i class="bi bi-heart-fill"></i>
                                    </a>
                                }
                                </AuthorizeView>
                                
                             </h2> <br>
                            <h4>Biography</h4>
                            <p>@actor.Biography</p>
                        </div> <br> <br>
                        <div class="col-md-12">
                            <h4>Known for</h4>
                            <ol class="actors scroller">
                                @foreach (Movie movie in @movies)
                                {
                                    @if (movie.poster_path != null)
                                    {
                                        <li class="card" style="border:none;">
                                            <a href="/MovieOverview" class="card-img" @onclick="() => MovieSelected(movie.id)">
                                                <img class="actor-image" src="http://image.tmdb.org/t/p/w500/@movie.poster_path">
                                            </a>

                                            <a href="/MovieOverview" class="card-img" @onclick="() => MovieSelected(movie.id)">
                                                @movie.title
                                            </a>
                                        </li>
                                    }
                                }
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private Actor actor = new Actor();
    private double averageMovieRatings;
    private MovieCredit credit = new MovieCredit();
    private List<Movie> movies = new List<Movie>();
    private List<int> actorIds = new List<int>();
    private bool isActorFavourite;

    protected override async Task OnInitializedAsync()
    {
        actor = await GetActor(ActorService.GetActorId());
        credit = await GetMovieCreditsByActorId(ActorService.GetActorId());
        actorIds = await GetFavouriteActorIds(UserService.GetUserId());
        if (actorIds.Contains(actor.Id))
        {
            isActorFavourite = true;
        }

        foreach (Movie movie in credit.Movies)
        {
            movies.Add(movie);
            averageMovieRatings += movie.vote_average;
        }
        averageMovieRatings = Math.Round(averageMovieRatings / movies.Count, 2);
    }

    private async Task<Actor> GetActor(int id)
    {
        var result = await ActorService.GetActorByID(id);
        return result;
    }

    private async Task<MovieCredit> GetMovieCreditsByActorId(int id)
    {
        var result = await ActorService.GetMovieCreditsByActorId(id);
        return result;
    }

    private async Task MovieSelected(int id)
    {
        MovieService.SetMovieId(id);
    }

    private async Task AddActorToFavourite(int userId, int actorId)
    {
        await FavouriteActorService.AddActorToFavourite(userId, actorId);
        isActorFavourite = true;
    }

    private async Task RemoveActorFromFavourite(int userId, int actorId)
    {
        await FavouriteActorService.RemoveActorFromFavourite(userId, actorId);
        isActorFavourite = false;
    }

    private async Task<List<int>> GetFavouriteActorIds(int userId)
    {
        actorIds = await FavouriteActorService.GetFavouriteActorIds(userId);
        return actorIds;
    }
}
